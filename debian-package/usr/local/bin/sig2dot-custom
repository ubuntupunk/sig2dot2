#!/usr/bin/perl
# sig2dot version 0.38 2024-11-29

# sig2dot v0.29 (c) Darxus@ChaosReigns.com, released under the GPL
# Download from: http://www.chaosreigns.com/code/sig2dot/
# sig2dot v0.35-0.37 (c) 2005, 2006 Christoph Berg <cb@df7cb.de>
# Download from: http://ftp.debian.org/debian/pool/main/s/sig2dot/

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA

# sig2dot script for generating DOT files from GPG key signatures
#
# Parses output of "gpg --list-sigs" into a format
# suitable for rendering into a graph by graphviz 
# (http://www.research.att.com/sw/tools/graphviz/) like so:
#
# $ gpg --list-sigs --keyring ./phillylinux.gpg | ./sig2dot.pl > phillylinux.dot
# $ neato -Tps phillylinux.dot > phillylinux.ps
# $ convert phillylinux.ps phillylinux.jpg
#
# Commandline options:
#
# -b
#   Black and white / do not colorize.
#
# -d <date>
#   Render graph as it appeared on <date> (ignores more recent
#   signatures).  Date must be in the format "YYYY-MM-DD".
#   Will also ignore keys that have since been revoked.
#
# -a
#   Render all keys, even if they're not signed by any other key.
#
# -u <"string">
#   Support localized output of GnuPG for unknown user IDs. For
#   example, German users have to write (with sh quotation marks!)
#   "[User-ID nicht gefunden]" if they use GnuPG with German
#   messages. Default is "[User id not found]".
#
# -r <"string">
#   Support localized output of GnuPG for revoked keys. For
#   example, French users have to write "révoqué" if they use
#   GnuPG with French messages. Default is "[revoked".
#
# -s stats.html
#   Produces statistics file with number of signatures per node
#
# -t <"string">
#   Graph title
#
# -h  print help
# -v  print version
# -q  be quiet
#
# Changes:
#
# v0.9 2000-09-14 19:20  strip trailing whitespace from $id more cleanly
# v0.10 2000-09-14 19:33 skip revoked keys at the request of Peter Palfrader <ppalfrad@cosy.sbg.ac.at>
# v0.11 Nov 22 21:38     use ID for node name instead of username for uniqueness
# v0.12 Dec 15 16:20 use names instead of IDs again in stats.html
# v0.13 Jun 19 03:15 red is proportional to signatures
# v0.14 Jun 19 03:25 blue is proportional to other keys signed
# v0.15 Jun 20 17:16 fixed blue, green is proportional to ratio
# v0.16 Jun 20 18:55 uniqed %signedby
# v0.17 Jan 10 19:10 Use overlap=scale instead of fixed edge lengths.  Requires new version of graphviz.
# v0.18 Jan 23 11:53 stats.html is now valid html (v.01 transitional)
# v0.23 May  3 18:52 bunch of new stuff, including -b flag (black & white), and fixes devision by zero error
# v0.24 May  3 18:59 add black outline to nodes, prettier (changed node attribute "color" to "fillcolor")
# v0.25 May  3 19:06 cleaned up anti- devision by zero code a little
# v0.26 May  4 00:08 strip all non-digit characters from $renderdate
# v0.27 May 10 00:23:49 2002 use {}'s to write 1 line per public key instead of one line per signature (much shorter)
# v0.28 Feb 13 2003 Change regex to handle option trust digit 
#                   <kevin@rosenberg.net>
# v0.29 Feb 18 2003 Add -s option to optionally produce statistics file 
#                   <kevin@rosenberg.net>
# v0.30 Feb 18 2003 Make --list-sigs regex more robust 
#                   Marco Bodrato <bodrato@gulp.linux.it>
# v0.31 Jul 28 2003 Add -u option for localized output of GnuPG
#                   Marcus Frings <protagonist@gmx.net>
# further changes are documented in debian/changelog

use strict;

my $version = "0.38";

my $chartchar = "*";
my $renderdate = "";
my ($stats, $color, $all, $not_found, $revokestr, $title);

use Getopt::Std;
my %opt;
getopts('d:u:r:s:bahqvt:', \%opt);

sub version {
  print <<EOT;
sig2dot $version
Copyright (c) 2002 Darxus\@ChaosReigns.com
Copyright (c) 2005, 2006 Christoph Berg <cb\@df7cb.de>
EOT
}

if ($opt{h}) {
  version();
  print <<EOT;
gpg --list-sigs | $0 [-abdhqsuv] > sigs.dot
-a              Graph all keys, even if they do not have a signature
-b              Black and white / do not colorize.
-d YYYY-MM-DD   Render graph as it appeared on date.
-h              Print this help and exit.
-q              Be quiet.
-r sting        key-is-revoked string (default: "[revoked").
-s stats.html   Produces statistics file with number of signatures per node.
-t title        Graph title
-u string       user-id-not-found string (default: "[user id not found]").
-v              Print version and exit.
EOT
  exit 0;
}

if ($opt{v}) {
  version();
  exit 0;
}

if ($opt{d}) { 
  $renderdate = $opt{d}; 
  print STDERR "Printing from date: $renderdate.\n";
  $renderdate =~ s/\D+//g;
}
if ($opt{s}) { 
  $stats = $opt{s}; 
  print STDERR "Print statistics to $stats.\n";
}
if ($opt{b}) 
{ 
  $color = 0; 
  print STDERR "Black and White.\n" unless $opt{q};
} else { 
  $color = 1; 
  print STDERR "Color.\n" unless $opt{q};
}
if ($opt{a}) {
  $all = 1;
} else {
  $all = 0;
}

if ($opt{u}) {
  $not_found = lc $opt{u};
} else {
  $not_found = "[user id not found]"; # this changed from gpg 1.2 -> 1.4
}

if ($opt{r}) {
  $revokestr = lc $opt{r};
} else {
  $revokestr = "[revoked"; # this changed from gpg 1.2 -> 1.4
}

if ($opt{t}) {
  $title = lc $opt{t};
} else {
  $title = "Keyring Statistics";
}

# Initialize variables
my $id = "";
my $owner = "";
my $name = "";
my @names = ();
my %name = ();
my %idlist = ();
my %revlist = ();
my %sigstmp = ();
my %signedbytmp = ();
my %revs = ();
my %sigs = ();
my %signedby = ();
my %current_key;  # Store information about the current key being processed

print "digraph \"$title\" {\n";
print "overlap=scale\n";
print "splines=true\n";
print "sep=.1\n";

while (my $line = <STDIN>)
{
  chomp $line;
  my @fields = split /:/, $line;
  next unless @fields >= 10;  # Ensure we have enough fields
  
  my $type = $fields[0];
  my $keyid = $fields[4];
  my $sigtype = $fields[6];  # Signature type
  
  if ($type eq "pub") {
    $current_key{id} = $keyid;
    $id = $keyid;
    $owner = $id;
    $idlist{$id} = 1;
    print STDERR "Processing key ID: $id\n" unless $opt{q};
  }
  
  elsif ($type eq "uid" && defined $owner) {
    my $uid = $fields[9];
    $uid =~ s/^\s+|\s+$//g;  # Trim whitespace
    $name{$owner} = $uid;
    $current_key{name} = $uid;
    print STDERR "Storing name for $owner: $uid\n" unless $opt{q};
    push @names, $owner unless grep { $_ eq $owner } @names;
  }
  
  elsif ($type eq "sig") {
    my $sig_id = $keyid;
    if (defined $owner && $sig_id) {
      # Store the signature relationship (signer -> signee)
      if ($sig_id ne $owner) {  # Skip self-signatures unless $all is set
        push @{$sigs{$sig_id}}, $owner unless grep { $_ eq $owner } @{$sigs{$sig_id} || []};
        push @names, $sig_id unless grep { $_ eq $sig_id } @names;
        print STDERR "Added signature: $sig_id signed key of $owner\n" unless $opt{q};
      } elsif ($all) {
        push @{$sigs{$sig_id}}, $owner;
        print STDERR "Added self-signature: $sig_id\n" unless $opt{q};
      }
    }
  }
}

# Generate nodes with color
print "node [style=filled, colorscheme=set19]\n";
my %unique_names = map { $_ => 1 } @names;
my $color_index = 1;
for my $id (sort keys %unique_names) {
  my $label = $name{$id} || $id;
  $label =~ s/"//g;  # Remove quotes to prevent DOT syntax errors
  print "\"$id\" [label=\"$label\", fillcolor=$color_index]\n";
  $color_index = ($color_index % 9) + 1;  # Cycle through colors 1 to 9
}

# Generate edges with color
print "edge [colorscheme=set19]\n";
for my $signer (sort keys %sigs) {
  my %seen;  # To prevent duplicate edges
  for my $signee (@{$sigs{$signer}}) {
    next if $seen{"$signer -> $signee"}++;
    print "\"$signer\" -> \"$signee\" [color=$color_index];\n";
    $color_index = ($color_index % 9) + 1;  # Cycle through colors 1 to 9
  }
}

print "}\n";

# vim:sw=2:
