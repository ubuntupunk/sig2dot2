#!/bin/bash
# sig2dot2 version 0.1
#
# Copyright (C) 202 David Robert Lewis aka DavDev
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# Available at: repo.netbones.co.za

# Function to print colorful messages
print_color() {
    local color_code=$1
    local message=$2
    echo -e "\033[${color_code}m${message}\033[0m"
}

# Function to check and install GraphViz
check_graphviz() {
    print_color "1;34" "Checking for GraphViz installation..."
    if ! command -v dot &> /dev/null; then
        print_color "1;33" "GraphViz not found. Attempting to install..."
        
        # Check package manager and install
        if command -v apt-get &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y graphviz
        elif command -v dnf &> /dev/null; then
            sudo dnf install -y graphviz
        elif command -v yum &> /dev/null; then
            sudo yum install -y graphviz
        elif command -v pacman &> /dev/null; then
            sudo pacman -S --noconfirm graphviz
        else
            print_color "1;31" "Error: Could not determine package manager. Please install GraphViz manually."
            exit 1
        fi
        
        # Verify installation
        if ! command -v dot &> /dev/null; then
            print_color "1;31" "Error: GraphViz installation failed."
            exit 1
        fi
        print_color "1;32" "GraphViz successfully installed."
    else
        print_color "1;32" "GraphViz is already installed."
    fi
}

# Function to check for key relationships
check_relationships() {
    local dot_file="$1"
    local edge_count=$(grep -c '" -> "' "$dot_file")
    
    if [ "$edge_count" -eq 0 ]; then
        print_color "1;31" "No key relationships detected in your GPG keyring!"
        print_color "1;33" "\nThis means your keys haven't been cross-signed with other keys. To create meaningful visualizations, you need:"
        echo "1. Multiple GPG keys"
        echo "2. Keys that have signed each other"

        echo "\nHere's how to create test relationships:"

        echo "1. Create a test key:"
        echo "   gpg --quick-generate-key \"Test User <test@example.com>\""

        echo "2. Export your public key:"
        echo "   gpg --export -a your@email.com > mykey.asc"

        echo "3. Share your public key with others and get their keys:"
        echo "   - They should import your key: gpg --import mykey.asc"
        echo "   - They should sign your key: gpg --sign-key your@email.com"
        echo "   - They should export their signed version: gpg --export -a your@email.com > signed_key.asc"
        echo "   - You import the signed version: gpg --import signed_key.asc"

        echo "4. Repeat the process with their keys"

        echo "\nFor testing, you can also create multiple test keys and sign them yourself:"
        echo "   gpg --quick-generate-key \"Test User 1 <test1@example.com>\""
        echo "   gpg --quick-generate-key \"Test User 2 <test2@example.com>\""
        echo "   gpg --sign-key test1@example.com"
        echo "   gpg --sign-key test2@example.com"

        echo "\nFor more detailed instructions, see sig2dot2/TESTING.md"
    fi
    echo "$edge_count"
}

# Parse command-line arguments
SELF_SIG=false
DEBUG=false
JAAL=false

while [[ "$#" -gt 0 ]]; do
  case $1 in
    -s|--self-signatures)
      SELF_SIG=true
      shift
      ;;
    --jaal)
      JAAL=true
      shift
      ;;
    --debug)
      DEBUG=true
      shift
      ;;
    *)
      shift
      ;;
  esac
done

# Check if sig2dot is installed
if ! command -v sig2dot-custom &> /dev/null; then
    print_color "1;31" "Error: sig2dot-custom is not installed. Please install it by running 'sudo apt install sig2dot' or by using the provided Debian package."
    exit 1
fi

# Check and install GraphViz if needed
check_graphviz

# Create temporary files for the DOT output
print_color "1;34" "Checking for GPG signatures..."
temp_dot=$(mktemp)
temp_dot_self_sig=$(mktemp)

# Run sig2dot with and without the self-signatures flag
SIG2DOT_CMD="sig2dot-custom"
SIG2DOT_CMD_SELF_SIG="sig2dot-custom -s"

# Process the GPG signatures
gpg --list-sigs --with-colons | $SIG2DOT_CMD > "$temp_dot"
gpg --list-sigs --with-colons | $SIG2DOT_CMD_SELF_SIG > "$temp_dot_self_sig"

# Check if sig2dot succeeded
if [ $? -ne 0 ]; then
  print_color "1;31" "Error: sig2dot processing failed"
  rm "$temp_dot"
  rm "$temp_dot_self_sig"
  exit 1
fi

# Check for key relationships
edge_count=$(check_relationships "$temp_dot")
edge_count_self_sig=$(check_relationships "$temp_dot_self_sig")

# Debugging: Output the DOT file content if --debug is set
if [ "$DEBUG" = true ]; then
  print_color "1;34" "Debugging: Displaying DOT file content..."
  cat "$temp_dot"
  cat "$temp_dot_self_sig"
fi

# Generate PNG from DOT file
print_color "1;34" "Generating keysigs.png..."
dot -Tpng "$temp_dot" -o keysigs.png
dot -Tpng "$temp_dot_self_sig" -o keysigs_self_sig.png

# Check if dot succeeded
if [ $? -ne 0 ]; then
  print_color "1;31" "Error: dot processing failed"
  rm "$temp_dot"
  rm "$temp_dot_self_sig"
  exit 1
fi

# Output data for Jaal visualization
if [ "$JAAL" = true ]; then
    # Example: Output nodes and edges in CSV format
    echo "id,label" > nodes.csv
    echo "key1,User 1" >> nodes.csv
    echo "key2,User 2" >> nodes.csv

    echo "source,target" > edges.csv
    echo "key1,key2" >> edges.csv
    echo "key2,key3" >> edges.csv

    print_color "1;32" "Jaal visualization data generated: nodes.csv, edges.csv"
    exit 0
fi

# Clean up temporary files
rm "$temp_dot"
rm "$temp_dot_self_sig"

print_color "1;32" "Successfully generated keysigs.png and keysigs_self_sig.png"

# Provide guidance if no relationships were detected
if [ "$edge_count" -eq 0 ]; then
  print_color "1;33" "
Note: The generated graph shows keys without relationships. To see connections, ensure keys are cross-signed.
"
fi
if [ "$edge_count_self_sig" -eq 0 ]; then
  print_color "1;33" "
Note: The generated graph with self-signatures shows keys without relationships. To see connections, ensure keys are cross-signed.
"
fi

# Offer to open the keysigs.png using common image viewers
if command -v feh &> /dev/null; then
    read -p "Do you want to open keysigs.png with feh? (y/n): " open_image
    if [[ "$open_image" == "y" || "$open_image" == "Y" ]]; then
        feh keysigs.png
    fi
else
    echo "feh is not installed. Please install it or use another image viewer to open keysigs.png."
fi
